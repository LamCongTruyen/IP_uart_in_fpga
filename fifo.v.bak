module fifo #(
    parameter DATA_WITH  = 8,
    parameter ADDR_WIDTH = 4
)(
    input  logic clk, reset,
    input  logic rd, wr,
    input  logic [DATA_WITH-1:0] w_data,
    output logic empty, full,
    output logic [DATA_WITH-1:0] r_data
);

    logic [ADDR_WIDTH-1:0] w_addr, r_addr;
    logic wr_en, full_tmp;

    // Cho phép ghi khi wr=1 và FIFO chưa đầy
    assign wr_en = wr & ~full_tmp;
    assign full  = full_tmp;

    // --- FIFO Controller ---
    fifo_ctrl #(.ADDR_WIDTH(ADDR_WIDTH)) c_unit (
        .clk   (clk),
        .reset (reset),
        .rd    (rd),
        .wr    (wr),
        .empty (empty),
        .full  (full_tmp),
        .w_addr(w_addr),
        .r_addr(r_addr)
    );

    // --- Register file (bộ nhớ FIFO) ---
    reg_file #(.DATA_WITH(DATA_WITH), .ADDR_WIDTH(ADDR_WIDTH)) f_unit (
        .clk   (clk),
        .we    (wr_en),
        .w_addr(w_addr),
        .r_addr(r_addr),
        .w_data(w_data),
        .r_data(r_data)
    );

endmodule

// ========================================================
// Register file (bộ nhớ FIFO)
// ========================================================
module reg_file #(
    parameter DATA_WITH  = 8,
    parameter ADDR_WIDTH = 4
)(
    input  logic clk,
    input  logic we,
    input  logic [ADDR_WIDTH-1:0] w_addr, r_addr,
    input  logic [DATA_WITH-1:0] w_data,
    output logic [DATA_WITH-1:0] r_data
);

    localparam DEPTH = 1 << ADDR_WIDTH;
    logic [DATA_WITH-1:0] mem [0:DEPTH-1];

    // ghi dữ liệu
    always_ff @(posedge clk)
        if (we)
            mem[w_addr] <= w_data;

    // đọc dữ liệu
    assign r_data = mem[r_addr];

endmodule
