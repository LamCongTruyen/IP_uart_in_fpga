|uart_string_loopback
clk => clk.IN2
rst_n => rst_n.IN2
rx => rx.IN1
tx << uart_tx:uart_tx_inst.tx


|uart_string_loopback|uart_rx:uart_rx_inst
clk => valid~reg0.CLK
clk => data_out[0]~reg0.CLK
clk => data_out[1]~reg0.CLK
clk => data_out[2]~reg0.CLK
clk => data_out[3]~reg0.CLK
clk => data_out[4]~reg0.CLK
clk => data_out[5]~reg0.CLK
clk => data_out[6]~reg0.CLK
clk => data_out[7]~reg0.CLK
clk => rx_shift[0].CLK
clk => rx_shift[1].CLK
clk => rx_shift[2].CLK
clk => rx_shift[3].CLK
clk => rx_shift[4].CLK
clk => rx_shift[5].CLK
clk => rx_shift[6].CLK
clk => rx_shift[7].CLK
clk => bit_index[0].CLK
clk => bit_index[1].CLK
clk => bit_index[2].CLK
clk => bit_index[3].CLK
clk => counter[0].CLK
clk => counter[1].CLK
clk => counter[2].CLK
clk => counter[3].CLK
clk => counter[4].CLK
clk => counter[5].CLK
clk => counter[6].CLK
clk => counter[7].CLK
clk => counter[8].CLK
clk => counter[9].CLK
clk => counter[10].CLK
clk => counter[11].CLK
clk => counter[12].CLK
clk => state~5.DATAIN
rst_n => valid~reg0.ACLR
rst_n => data_out[0]~reg0.ACLR
rst_n => data_out[1]~reg0.ACLR
rst_n => data_out[2]~reg0.ACLR
rst_n => data_out[3]~reg0.ACLR
rst_n => data_out[4]~reg0.ACLR
rst_n => data_out[5]~reg0.ACLR
rst_n => data_out[6]~reg0.ACLR
rst_n => data_out[7]~reg0.ACLR
rst_n => rx_shift[0].ACLR
rst_n => rx_shift[1].ACLR
rst_n => rx_shift[2].ACLR
rst_n => rx_shift[3].ACLR
rst_n => rx_shift[4].ACLR
rst_n => rx_shift[5].ACLR
rst_n => rx_shift[6].ACLR
rst_n => rx_shift[7].ACLR
rst_n => bit_index[0].ACLR
rst_n => bit_index[1].ACLR
rst_n => bit_index[2].ACLR
rst_n => bit_index[3].ACLR
rst_n => counter[0].ACLR
rst_n => counter[1].ACLR
rst_n => counter[2].ACLR
rst_n => counter[3].ACLR
rst_n => counter[4].ACLR
rst_n => counter[5].ACLR
rst_n => counter[6].ACLR
rst_n => counter[7].ACLR
rst_n => counter[8].ACLR
rst_n => counter[9].ACLR
rst_n => counter[10].ACLR
rst_n => counter[11].ACLR
rst_n => counter[12].ACLR
rst_n => state~7.DATAIN
rx => rx_shift.DATAB
rx => rx_shift.DATAB
rx => rx_shift.DATAB
rx => rx_shift.DATAB
rx => rx_shift.DATAB
rx => rx_shift.DATAB
rx => rx_shift.DATAB
rx => rx_shift.DATAB
rx => data_out.OUTPUTSELECT
rx => data_out.OUTPUTSELECT
rx => data_out.OUTPUTSELECT
rx => data_out.OUTPUTSELECT
rx => data_out.OUTPUTSELECT
rx => data_out.OUTPUTSELECT
rx => data_out.OUTPUTSELECT
rx => data_out.OUTPUTSELECT
rx => valid.OUTPUTSELECT
rx => Selector18.IN3
rx => state.DATAA
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => counter.OUTPUTSELECT
rx => state.DATAA
rx => Selector19.IN0
data_out[0] <= data_out[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[1] <= data_out[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[2] <= data_out[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[3] <= data_out[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[4] <= data_out[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[5] <= data_out[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[6] <= data_out[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_out[7] <= data_out[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
valid <= valid~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart_string_loopback|uart_tx:uart_tx_inst
clk => tx_shift[0].CLK
clk => tx_shift[1].CLK
clk => tx_shift[2].CLK
clk => tx_shift[3].CLK
clk => tx_shift[4].CLK
clk => tx_shift[5].CLK
clk => tx_shift[6].CLK
clk => tx_shift[7].CLK
clk => busy~reg0.CLK
clk => bit_index[0].CLK
clk => bit_index[1].CLK
clk => bit_index[2].CLK
clk => bit_index[3].CLK
clk => baud_counter[0].CLK
clk => baud_counter[1].CLK
clk => baud_counter[2].CLK
clk => baud_counter[3].CLK
clk => baud_counter[4].CLK
clk => baud_counter[5].CLK
clk => baud_counter[6].CLK
clk => baud_counter[7].CLK
clk => baud_counter[8].CLK
clk => baud_counter[9].CLK
clk => baud_counter[10].CLK
clk => baud_counter[11].CLK
clk => baud_counter[12].CLK
clk => tx~reg0.CLK
clk => state~5.DATAIN
rst_n => busy~reg0.ACLR
rst_n => bit_index[0].ACLR
rst_n => bit_index[1].ACLR
rst_n => bit_index[2].ACLR
rst_n => bit_index[3].ACLR
rst_n => baud_counter[0].ACLR
rst_n => baud_counter[1].ACLR
rst_n => baud_counter[2].ACLR
rst_n => baud_counter[3].ACLR
rst_n => baud_counter[4].ACLR
rst_n => baud_counter[5].ACLR
rst_n => baud_counter[6].ACLR
rst_n => baud_counter[7].ACLR
rst_n => baud_counter[8].ACLR
rst_n => baud_counter[9].ACLR
rst_n => baud_counter[10].ACLR
rst_n => baud_counter[11].ACLR
rst_n => baud_counter[12].ACLR
rst_n => tx~reg0.PRESET
rst_n => state~7.DATAIN
rst_n => tx_shift[0].ENA
rst_n => tx_shift[7].ENA
rst_n => tx_shift[6].ENA
rst_n => tx_shift[5].ENA
rst_n => tx_shift[4].ENA
rst_n => tx_shift[3].ENA
rst_n => tx_shift[2].ENA
rst_n => tx_shift[1].ENA
trigger => tx_shift.OUTPUTSELECT
trigger => tx_shift.OUTPUTSELECT
trigger => tx_shift.OUTPUTSELECT
trigger => tx_shift.OUTPUTSELECT
trigger => tx_shift.OUTPUTSELECT
trigger => tx_shift.OUTPUTSELECT
trigger => tx_shift.OUTPUTSELECT
trigger => tx_shift.OUTPUTSELECT
trigger => state.OUTPUTSELECT
trigger => state.OUTPUTSELECT
trigger => state.OUTPUTSELECT
trigger => state.OUTPUTSELECT
trigger => busy~reg0.DATAIN
data_in[0] => tx_shift.DATAB
data_in[1] => tx_shift.DATAB
data_in[2] => tx_shift.DATAB
data_in[3] => tx_shift.DATAB
data_in[4] => tx_shift.DATAB
data_in[5] => tx_shift.DATAB
data_in[6] => tx_shift.DATAB
data_in[7] => tx_shift.DATAB
tx <= tx~reg0.DB_MAX_OUTPUT_PORT_TYPE
busy <= busy~reg0.DB_MAX_OUTPUT_PORT_TYPE


